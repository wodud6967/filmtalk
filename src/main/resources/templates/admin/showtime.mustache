
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accordion Menu</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/admin/header.css">
    <style>

        /* Sidebar styles */
        aside {
            width: 250px;
        }
        aside .side__icon {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        aside nav ul {
            margin-bottom: 20px;
        }
        aside nav ul li {
            margin-bottom: 10px;
        }
        aside nav > ul> li> a {
            display: block;
            background-color: #f6f6f6;
            border-top: 1px solid #cfcfcf;
            padding: 0 0 0 17px;
            font-size: 12px;
            line-height: 2.8;
            font-weight: 600;
            vertical-align: middle;
            cursor: pointer;
        }
        aside nav ul li ul {
            display: none;
            margin-top: 10px;
        }
        aside nav ul li ul.on {
            display: block;
        }
        aside nav ul li ul li {
            background-color: #fff;
        }
        aside nav ul li ul li.active a{
            color: red;
        }
        aside nav ul li ul li a {
            font-size: 13px;
            color: #555;
            background-color: #fff;
        }
        aside nav ul li ul li a:hover {
            background-color: #eaeaea;
        }

        /*----------------------*/
        main {
            display: flex;
        }
        main section {
            flex: 1;
            min-height: 700px;
            border-left: 1px solid #ccc;
            padding-bottom: 100px;
            background-color: #ccc;

        }
        .sec__top{
            background-color: #fff;
        }
        .content__route{
            border-bottom: 1px solid #d7d7d7;
            margin-left: 16px;
            padding-left: 24px;
            color: #666;
            background: #fff;
            line-height: 28px;
            display: flex;
            justify-content: flex-start;
            gap: 20px;
        }
        .content__route div{
            font-size: 11px;
        }
        .content__title{
            position: relative;
            height: 56px;

            margin-left: 16px;
            padding-left: 24px;
            background: #fff;
            display: flex;
            align-items: center;
        }
        table{
            width: 100%;
            border-collapse: collapse;
            border-spacing: 0;
            border: 1px solid #d7d7d7;
        }
        .fb__filter__title{
            padding-left: 35px;
            color: #000;
            font-size: 13px;
            font-weight: normal;
            text-align: left;
            background: #f9f9f9;
            border-right: 1px solid #d7d7d7;;
        }
        .name__filter__text{
            width: 360px;
            height: 30px;
            margin-right: 10px;
            padding: 5px;
            border: 1px solid #d7d7d7;
            box-sizing: border-box;
        }
        /* --------------------------------------*/
        .contain__box{
            width: 60%;

            padding: 20px;
            margin-top: 20px;
            margin-left: 20px;
            background-color: #FFF;
        }


        .date-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px;
            background-color: #f5f5f5;
            border-radius: 5px;
        }

        .date-nav .date-item {
            text-align: center;
            padding: 10px;
            cursor: pointer;
        }

        .date-item.active {
            background-color: black;
            color: white;
            border-radius: 50%;
        }

        .screen-item {
            margin-bottom: 30px;
        }

        .screen-title {
            font-weight: bold;
            margin-bottom: 10px;
        }

        .items {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
        }

        .time-item,
        .btn-add-time {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 10px;
            background-color: #f5f5f5;
            border-radius: 5px;
            text-align: center;
            height: 150px; /* 일정한 높이 설정 */
            width: 100%; /* 그리드에서 차지하는 폭 */
        }

        .time-item span {
            font-size: 1.2rem;
        }

        .movie-runtime {
            font-size: 1rem;
            color: gray;
        }

        .hidden {
            display: none;
        }

        /* + 버튼 스타일을 상영 시간과 동일하게 */
        .btn-add-time {
            background-color: #28a745;
            color: white;
            font-size: 2rem;
            cursor: pointer;
            border: none;
            transition: background-color 0.3s;
            height: 150px; /* 일정한 높이 설정 */
            width: 100%; /* 그리드에서 차지하는 폭 */
        }

        .btn-add-time:hover {
            background-color: #218838;
        }

    </style>
</head>
<body>

<header>
    <div class="header__top">
        <h1><img src="" alt=""><a href="/admin/dashboard">Admin</a></h1>
        <ul>
            <li><a href="#">서면롯데시네마</a></li>
            <li><a href="#">메인페이지</a></li>
            <li><a href="#">로그아웃</a></li>
        </ul>
    </div>
    <div class="header__bottom">
        <ul>
            <li><a href="/admin/dashboard">데시보드</a> </li>
            <li><a href="/admin/member">회원관리</a></li>
            <li><a href="/admin/cinema">상영관등록</a></li>
            <li  ><a href="/admin/movie">영화관리</a></li>
            <li  class="active"><a href="/admin/showtime">상영관관리</a></li>
            <li><a href="#">영화관관리</a></li>
        </ul>
    </div>
</header>


<main>
    <aside>
        <div class="side__icon">
            <div>영화관리</div>
        </div>

        <nav>
            <ul class="admin__info">
                <li>
                    <a href="#">영화등록</a>
                    <ul >
                        <li><a href="#">최신영화</a></li>
                        <li><a href="#">보유중인영화</a></li>
                        <li><a href="#">상영중인영화</a></li>
                        <li ><a href="#">영화배급받기</a></li>
                        <li><a href="#">영화등록하기</a></li>
                    </ul>
                </li>
            </ul>
            <ul class="point">
                <li>
                    <a href="#">상영관관리</a>
                    <ul class="on">
                        <li><a href="#">상영관등록</a></li>
                        <li class="active"><a href="#">상영관스케줄등록</a></li>
                        <li><a href="#">좌석등록</a></li>
                    </ul>
                </li>
            </ul>
        </nav>
    </aside>

    <section>
        <div class="sec__top">
            <div class="content__route">
                <div>상영관관리</div>
                <div>></div>
                <div>상영관스케줄등록하기</div>
            </div>
            <div class="content__title">
                <h3>상영관등록하기</h3>
            </div>
        </div>
        <div class="contain__box">
            <h3>상영 시간표</h3>

            <!-- 날짜 네비게이션 -->
            <div class="date-nav">
                <button class="btn btn-light">◀</button>
                {{#dates}}
<<<<<<< HEAD
<<<<<<< HEAD
                    <div class="date-item {{#isToday}}active{{/isToday}}" data-date="{{fullDate}}" onclick="fetchShowtimes('{{fullDate}}', this)">
=======
                    <div class="date-item {{#isToday}}active{{/isToday}}" data-date="{{fullDate}}" onclick="fetchShowtimes('{{formattedDate}}')">
>>>>>>> 99fb708 (네이티브쿼리 작성)
=======
                    <div class="date-item {{#isToday}}active{{/isToday}}" data-date="{{fullDate}}" onclick="fetchShowtimes('{{fullDate}}', this)">
>>>>>>> cb5e4db (상영관 등록하기 완료)
                        {{formattedDate}}<br>{{formattedDay}}
                    </div>
                {{/dates}}
                <button class="btn btn-light">▶</button>
            </div>
            <!-- 새로운 컨테이너를 date-nav 아래에 추가 -->
            <div id="screenContainer">
<<<<<<< HEAD
<<<<<<< HEAD
                {{#model.cinemaSchedule}}
                    {{#screens}}
                        <div class="screen-item" id="screen{{screenId}}" data-screen-id="{{screenId}}" data-date="12">
                            <div class="screen-title">{{screenName}}</div>
                            <div class="items">
                                {{#showtimes}}
                                    <div class="time-item">
                                        <span>{{startedAt}}</span>
                                        <span class="movie-name">{{movieName}}</span>
                                        <span class="movie-runtime">{{runtime}}</span>
                                    </div>
                                {{/showtimes}}
                                <!-- 여기서 data-screen-id는 숫자로 설정 -->
                                <button class="btn-add-time" data-screen-id="{{screenId}}" data-next-available-time="{{formattedNextAvailableTime}}" data-toggle="modal" data-target="#addTimeModal">+</button>

<<<<<<< HEAD

                            </div>
                        </div>
                    {{/screens}}
                {{/model.cinemaSchedule}}
            </div>
=======
=======
>>>>>>> 097d775 (상영관등록하기중)
            {{#model}}
=======
            {{#model.cinemaSchedule}}
>>>>>>> cb5e4db (상영관 등록하기 완료)
                {{#screens}}
                    <div class="screen-item" id="screen{{screenId}}" data-screen-id="{{screenId}}" data-date="12">
                        <div class="screen-title">{{screenName}}</div>
                        <div class="items">
                            {{#showtimes}}
                                <div class="time-item">
                                    <span>{{startedAt}}</span>
                                    <span class="movie-name">{{movieName}}</span>
                                    <span class="movie-runtime">{{runtime}}</span>
                                </div>
                            {{/showtimes}}
                            <!-- 여기서 data-screen-id는 숫자로 설정 -->
                            <button class="btn-add-time" data-screen-id="{{screenId}}" data-next-available-time="{{formattedNextAvailableTime}}" data-toggle="modal" data-target="#addTimeModal">+</button>


                        </div>
                    </div>
                {{/screens}}
<<<<<<< HEAD
            {{/model}}
<<<<<<< HEAD
>>>>>>> 28cb02c (상영시간더하기 진행중)
=======
=======
            {{/model.cinemaSchedule}}
>>>>>>> cb5e4db (상영관 등록하기 완료)
            </div>
>>>>>>> 097d775 (상영관등록하기중)



            <!-- 상영관 1 - 기본 숨김, 다른 날짜에만 표시 6일 -->
            <div class="screen-item" id="screen4" data-date="6">
                <div class="screen-title">1관</div>
                <div class="items">
                    <div class="time-item">
                        <span>12:30</span>
                        <span class="movie-name">안녕, 할부지</span>
                        <span class="movie-runtime">120분</span>
                    </div>
                    <div class="time-item">
                        <span>14:50</span>
                        <span class="movie-name">에일리언</span>
                        <span class="movie-runtime">130분</span>
                    </div>
                    <div class="time-item">
                        <span>17:20</span>
                        <span class="movie-name">파일럿</span>
                        <span class="movie-runtime">100분</span>
                    </div>
                    <div class="time-item">
                        <span>19:40</span>
                        <span class="movie-name">안녕, 할부지</span>
                        <span class="movie-runtime">120분</span>
                    </div>
                    <button class="btn-add-time" data-screen-id="screen4" data-toggle="modal" data-target="#addTimeModal">+</button>
                </div>
            </div>
        </div>
    </section>



</main>
<!-- Modal -->
<div class="modal fade" id="addTimeModal" tabindex="-1" role="dialog" aria-labelledby="addTimeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addTimeModalLabel">상영 시간 등록</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addTimeForm" action="/admin/showtime" method="POST">
                    <!-- 상영 영화 -->
                    <div class="form-group">
                        <label for="movie">상영 영화</label>
                        <select class="form-control select-box" id="movie" name="movieId">
                            <option value="">선택하세요</option>
                            {{#model.movieList}}
                                <option value="{{movieId}}" data-movie-name="{{movieName}}" data-runtime="{{runtime}}">{{movieName}}</option>
                            {{/model.movieList}}
                        </select>
                    </div>

                    <!-- 상영 시간 -->
                    <div class="form-group">
                        <label for="time">상영 시간</label>
                        <input type="text" class="form-control" id="time" name="time">
                    </div>

                    <!-- 영화 런타임 -->
                    <div class="form-group">
                        <label for="runtime">런타임(분)</label>
                        <input type="number" class="form-control" id="runtime" name="runtime" placeholder="예: 120">
                    </div>
                    <input type="hidden" id="screenId" name="screenId">

                    <button type="submit" class="btn btn-primary">저장</button>
                </form>
<<<<<<< HEAD
            </div>
=======
>>>>>>> cb5e4db (상영관 등록하기 완료)
        </div>
    </div>
<<<<<<< HEAD
    <!-- 로딩 스피너 -->
    <div id="loading-spinner" style="display: none;">
        <img src="/path-to-spinner.gif" alt="Loading...">
    </div>
    <!-- Bootstrap JS, jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
=======
</div>
<!-- 로딩 스피너 -->
<div id="loading-spinner" style="display: none;">
    <img src="/path-to-spinner.gif" alt="Loading...">
</div>
<!-- Bootstrap JS, jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
>>>>>>> 99fb708 (네이티브쿼리 작성)

<<<<<<< HEAD
    <script>
        let selectedScreenId = null;
        $('#addTimeModal').on('show.bs.modal', function (event) {
            const button = $(event.relatedTarget); // 모달을 여는 버튼에서 데이터 가져오기
            const nextAvailableTime = button.data('next-available-time'); // 버튼의 data 속성에서 다음 상영 시간 가져옴
            selectedScreenId = button.data('screen-id'); // 상영관 ID 가져와서 저장
=======
<script>
    let selectedScreenId = null;
    $('#addTimeModal').on('show.bs.modal', function (event) {
        const button = $(event.relatedTarget); // 모달을 여는 버튼에서 데이터 가져오기
        const nextAvailableTime = button.data('next-available-time'); // 버튼의 data 속성에서 다음 상영 시간 가져옴
        selectedScreenId = button.data('screen-id'); // 상영관 ID 가져와서 저장

        console.log("Selected Screen ID:", selectedScreenId);
        console.log(button);
        console.log(nextAvailableTime);

        // 모달 내부의 상영 시간 필드에 다음 상영 가능 시간을 설정
        $('#time').val(nextAvailableTime); // text 필드에 직접 설정

        // screenId 값을 숨겨진 필드에 설정
        $('#screenId').val(selectedScreenId);

        // 영화가 변경될 때마다 런타임을 자동으로 설정하는 코드
        $('#movie').on('change', function() {
            const selectedMovie = $(this).find('option:selected');
            const runtime = selectedMovie.data('runtime');

            // 선택한 영화의 런타임이 있으면 설정, 없으면 빈 값으로 초기화
            if (runtime) {
                $('#runtime').val(runtime);
            } else {
                $('#runtime').val('');
            }
        });
    });

    // Get all list items with submenus
    const menuItems = document.querySelectorAll('aside nav ul li a');
>>>>>>> cb5e4db (상영관 등록하기 완료)

            console.log("Selected Screen ID:", selectedScreenId);
            console.log(button);
            console.log(nextAvailableTime);

            // 모달 내부의 상영 시간 필드에 다음 상영 가능 시간을 설정
            $('#time').val(nextAvailableTime); // text 필드에 직접 설정

            // screenId 값을 숨겨진 필드에 설정
            $('#screenId').val(selectedScreenId);

            // 영화가 변경될 때마다 런타임을 자동으로 설정하는 코드
            $('#movie').on('change', function() {
                const selectedMovie = $(this).find('option:selected');
                const runtime = selectedMovie.data('runtime');

                // 선택한 영화의 런타임이 있으면 설정, 없으면 빈 값으로 초기화
                if (runtime) {
                    $('#runtime').val(runtime);
                } else {
                    $('#runtime').val('');
                }
            });
        });

        // Get all list items with submenus
        const menuItems = document.querySelectorAll('aside nav ul li a');

        // Loop through all the menu items and add click event listeners
        menuItems.forEach(item => {
            item.addEventListener('click', (e) => {
                // Prevent default behavior of the link
                e.preventDefault();

                // Get the next sibling (which should be the submenu)
                const submenu = item.nextElementSibling;

                // Toggle the "on" class to show or hide the submenu
                if (submenu.classList.contains('on')) {
                    submenu.classList.remove('on');
                } else {
                    submenu.classList.add('on');
                }
            });
        });




    </script>
    <script>


<<<<<<< HEAD
<<<<<<< HEAD

        // 비동기 요청으로 상영시간표 데이터를 가져오는 함수
        async function fetchShowtimes(selectedDate, clickedElement) {
=======
    // 날짜 클릭 시 비동기로 해당 날짜의 상영관 및 스케줄을 서버에서 가져옴
    $('.date-item').on('click', function() {
        const selectedDate = $(this).data('date');

        // 모든 날짜의 active 클래스를 제거하고, 클릭한 날짜에 추가
        $('.date-item').removeClass('active');
        $(this).addClass('active');

        // 비동기로 서버에 해당 날짜의 상영관 및 상영 시간표 요청
        fetchShowtimes(selectedDate);
    });
>>>>>>> 99fb708 (네이티브쿼리 작성)

    // 비동기 요청으로 상영시간표 데이터를 가져오는 함수
    async function fetchShowtimes(selectedDate) {

            const response = await fetch(`/admin/showtimes?date=${selectedDate}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
=======

    // 비동기 요청으로 상영시간표 데이터를 가져오는 함수
    async function fetchShowtimes(selectedDate, clickedElement) {


        // 모든 날짜의 active 클래스를 제거하고, 클릭한 날짜에 추가
        $('.date-item').removeClass('active');
        $(clickedElement).addClass('active');
        console.log(clickedElement);
        const response = await fetch(`/admin/showtimes?date=${selectedDate}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
>>>>>>> cb5e4db (상영관 등록하기 완료)
            }
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();  // JSON 데이터를 파싱
        console.log(data.body)
        updateShowtimes(data.body);  // 받아온 데이터로 화면을 업데이트

    }


    // 상영관 및 상영 시간을 화면에 업데이트하는 함수
    function updateShowtimes(data) {
        console.log("------------");
        const container = $('#screenContainer');

        console.log(container);

        // 기존의 상영 스케줄을 클리어
        container.empty();

        // 상영관과 상영 스케줄을 다시 렌더링
        data.cinemaSchedule.screens.forEach(screen => {
            console.log("Screen:", screen);  // 각 screen 데이터 확인
            //console.log("Showtimes:", screen.showtimes);  // screen의 showtimes 배열 확인
            const showtimes = screen.showtimes || [];
            const screenElement = `
            <div class="screen-item" id="screen${screen.screenId}" data-screen-id="${screen.screenId}">
                <div class="screen-title">${screen.screenName}</div>
                <div class="items">
                    ${screen.showtimes.map(showtime => `
                        <div class="time-item">
                            <span>${showtime.startedAt}</span>
                            <span class="movie-name">${showtime.movieName}</span>
                            <span class="movie-runtime">${showtime.runtime}분</span>
                        </div>
                    `).join('')}
                <button class="btn-add-time"
                    data-screen-id="${screen.screenId}"
                    data-next-available-time="${screen.formattedNextAvailableTime}"
                    data-toggle="modal"
                    data-target="#addTimeModal">
                    +
                </button>

                </div>
            </div>
        `;
            container.append(screenElement);
        });
    }

<<<<<<< HEAD
            // 모든 날짜의 active 클래스를 제거하고, 클릭한 날짜에 추가
            $('.date-item').removeClass('active');
            $(clickedElement).addClass('active');
            console.log(clickedElement);
            const response = await fetch(`/admin/showtimes?date=${selectedDate}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
=======
</script>

<<<<<<< HEAD
    async function handleAddTimeClick(screenId){
        selectedScreenId = `screen` + screenId;
        console.log("Selected Screen ID: " + selectedScreenId); // 디버깅용 로그
<<<<<<< HEAD
    });
>>>>>>> 28cb02c (상영시간더하기 진행중)
=======
        const selectedDate = $('.date-item.active').data('date');
        console.log("selectedDate : " +selectedDate);

        // 비동기로 서버에 데이터 요청
        try {
            const response = await fetch(`/admin/screen/${screenId}/shotimeForm?date=${selectedDate}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json(); // JSON 형식으로 응답 받음
           // populateModal(data); // 데이터를 받아서 모달에 표시

            // 로딩 스피너 숨기기
            $('#loading-spinner').hide();

        } catch (error) {
            console.error('Error fetching showtime data:', error);
            // 로딩 스피너 숨기기
            $('#loading-spinner').hide();
        }
    }

>>>>>>> 99fb708 (네이티브쿼리 작성)

            const data = await response.json();  // JSON 데이터를 파싱
            console.log(data.body)
            updateShowtimes(data.body);  // 받아온 데이터로 화면을 업데이트

<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
        console.log("movieName" + movieName);
        console.log("time" + time);
        console.log("runtime" + runtime);
        console.log("selectedScreenId" + selectedScreenId);
>>>>>>> 99fb708 (네이티브쿼리 작성)
        if (movieName && time && runtime && selectedScreenId) {

            // 새로운 time-item 생성
            const newTimeItem = `
            <div class="time-item">
                <span>${time}</span>
                <span class="movie-name">${movieName}</span>
                <span class="movie-runtime">${runtime}분</span>
            </div>
        `;
            console.log(`Selector: #${selectedScreenId} .items .btn-add-time`);
            // 선택된 상영관의 items 클래스 내에서 + 버튼 앞에 새 아이템을 추가
            $(`#${selectedScreenId} .items .btn-add-time`).before(newTimeItem);

            // 모달 닫기
            $('#addTimeModal').modal('hide');

            // 폼 초기화
            $('#addTimeForm')[0].reset();
        } else {
            alert('모든 항목을 입력해주세요.');
>>>>>>> 28cb02c (상영시간더하기 진행중)
        }


        // 상영관 및 상영 시간을 화면에 업데이트하는 함수
        function updateShowtimes(data) {
            console.log("------------");
            const container = $('#screenContainer');

            console.log(container);

            // 기존의 상영 스케줄을 클리어
            container.empty();

            // 상영관과 상영 스케줄을 다시 렌더링
            data.cinemaSchedule.screens.forEach(screen => {
                console.log("Screen:", screen);  // 각 screen 데이터 확인
                //console.log("Showtimes:", screen.showtimes);  // screen의 showtimes 배열 확인
                const showtimes = screen.showtimes || [];
                const screenElement = `
            <div class="screen-item" id="screen${screen.screenId}" data-screen-id="${screen.screenId}">
                <div class="screen-title">${screen.screenName}</div>
                <div class="items">
                    ${screen.showtimes.map(showtime => `
                        <div class="time-item">
                            <span>${showtime.startedAt}</span>
                            <span class="movie-name">${showtime.movieName}</span>
                            <span class="movie-runtime">${showtime.runtime}분</span>
                        </div>
                    `).join('')}
                <button class="btn-add-time"
                    data-screen-id="${screen.screenId}"
                    data-next-available-time="${screen.formattedNextAvailableTime}"
                    data-toggle="modal"
                    data-target="#addTimeModal">
                    +
                </button>

                </div>
            </div>
        `;
                container.append(screenElement);
            });
        }

    </script>



=======
>>>>>>> cb5e4db (상영관 등록하기 완료)






</body>
</html>